#pragma checksum "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4613a789d91f0a41e0d4e5d1051ddc9fcdee5222"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Task_Index), @"mvc.1.0.view", @"/Views/Task/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\ASUS\Desktop\Annotation\App\Views\_ViewImports.cshtml"
using App;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ASUS\Desktop\Annotation\App\Views\_ViewImports.cshtml"
using App.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4613a789d91f0a41e0d4e5d1051ddc9fcdee5222", @"/Views/Task/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"12334568134fabec32ff1911f23453426e7f6405", @"/Views/_ViewImports.cshtml")]
    public class Views_Task_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DB.Models.Task>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml"
  
    ViewData["Title"] = "Tasks";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("CSS", async() => {
                WriteLiteral("\r\n    <link rel=\"stylesheet\" href=\"/css/task.css?v5\" />\r\n");
            }
            );
            DefineSection("tasks_link", async() => {
                WriteLiteral("\r\n    my_navlink-active\r\n");
            }
            );
            WriteLiteral(@"
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"" />


<div class=""row"">
    <div class=""col-md-12 mt-4 my-cont"">
        <div class=""card shadow"" style=""height: 586px;"">
            <div class=""card-header pb-0 px-3"" style="" background-image: linear-gradient(310deg, rgb(150, 41, 65) 60%, black 100%) !important;"">
                <h6 class=""mb-0"" style=""text-align:center;color:#fff;font-weight:900"">Task Information</h6>
            </div>

            <div class=""wrapper"" style=""margin-left: 0px; margin-right: 0px;"">
                <i class=""fa-solid fa-angle-left mov"" id=""leftBtn""></i>
                <div class=""row"" style=""width: 100%"">
                    <ul class=""carousel"" style=""overflow-y: hidden; scrollbar-width: none; width: 100%  "" id=""tasksBody"">
                    </ul>
                </div>

                <i class=""fa-solid fa-angle-right mov"" id=""rightBtn""></i>
            </div>
        </div>
    </div>
</div>");
            WriteLiteral("\n\r\n\r\n<div id=\"modal-container\">\r\n</div>\r\n<div id=\"create\" class=\"shadow\" onclick=\"getCreateModel()\">\r\n    <div class=\"text-dark position-fixed px-3 py-2\">\r\n        <i class=\"fa fa-plus py-2\"> </i>\r\n    </div>\r\n</div>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    <!--GetAll-->\r\n    <script>\r\n        function loadData()\r\n        {\r\n\r\n            $.ajax({\r\n                url: \'");
#nullable restore
#line 51 "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml"
                 Write(Url.Action("GetAll", "Task"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    var HTML = '';
                    var id = 0;
                    data['data'].forEach(function (item) {
                        id++;
                        var status;
                        var report = `<a href='");
#nullable restore
#line 60 "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml"
                                          Write(Url.Action("Index", "Report"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?taskId=${item.id}' class=""btn mt-1 w-90"" style=""background-image: linear-gradient(310deg, rgb(150, 41, 65) 60%, black 100%); color: #fff; margin: auto;width: 300px !important;"">View Report</a>`;
                        if (item.status == 0) {
                            report = `<a href='#' class=""btn mt-1 w-90 disabled"" style=""background-image: linear-gradient(310deg, rgb(150, 41, 65) 60%, black 100%); color: #fff; margin: auto;width: 300px !important;"">View Report</a>`;
                            status = ` <span style=""color:#ead406;font-size: 12px;font-weight: 900;"">Waiting</span>`;
                        }
                        else if (item.status == 1) {
                            status = ` <span style=""color:#0672ea;font-size: 12px;font-weight: 900;"">Running</span>`;
                        }
                        else if (item.status == 3) {
                            status = ` <span style=""font-size: 12px;font-weight: 900;color:#28a745!important;"">Finished</span>`;
            ");
                WriteLiteral(@"            }
                        else if (item.status == 4) {
                            status = ` <span class=""text-danger"" style=""font-size: 12px;font-weight: 900;"">Cancelled</span>`;
                        }
                        else if (item.status == 5) {
                            status = ` <span class=""text-danger"" style=""font-size: 12px;font-weight: 900;"">Waiting for AI Training</span>`;
                        }
                        console.log(data);
                        var img = ""/img/image.jpg"";
                        if (item.inputType.id == 2) img = ""/img/txt.png"";
                        HTML += `
                        <li class=""card"">
                            <div class=""card-header mx-4 p-3 text-center"">
                                <i onclick=""removeCard(${item.id})"" class=""fas fa-trash p-3 cursor-pointer text-secondary opacity-8 position-absolute end-0 top-0""></i>
                                <i onclick=""getEditModel(${item.id})"" class=""fa fa-p");
                WriteLiteral(@"en  p-3 cursor-pointer text-secondary opacity-8 position-absolute end-10 top-0""></i>
                                <div class=""icon icon-shape icon-lg bg-gradient-primary shadow text-center border-radius-lg "" style="" background-image: linear-gradient(310deg, rgb(150, 41, 65) 60%, black 100%) !important;"">
                                    <img src=""${img}"" class=""img"" />
                                </div>
                            </div>
                            <div class=""card-body pt-0 p-3 text-center"">
                                <h2>${item.name}</h2>
                                    ${status}
                                <div class=""my-containr"">
                                    <div class=""my-info"">
                                        <span>Maneger:</span>
                                        <p>${item.taskManeger}</p>
                                    </div>
                                    <div class=""my-info"">
                                       ");
                WriteLiteral(@" <span>Number of annotator:</span>
                                        <p>${item.numberOfAnnotators}</p>
                                    </div>
                                    <div class=""my-info"">
                                        <span>Random:</span>
                                        <p>${item.random}</p>
                                    </div>
                                    <div class=""my-info"">
                                        <span>Class mapping:</span>
                                        <p>${item.annotationClassMapping.name}</p>
                                    </div>
                                    <div class=""my-info"">
                                        <span>Distribution policy:</span>
                                        <p>${item.distributionPolicy.name}</p>
                                    </div>
                                    <div class=""my-info"">
                                        <span>Task type:</span>
   ");
                WriteLiteral(@"                                     <p>${item.taskType.name}</p>
                                    </div>

                                </div>
                                <div class=""my-info"">
                                    <span>Deadline:</span>
                                    <p>${item.deadline.split('T')[0]}</p>
                                </div>
                                 <div>
                                    ${report}
                                 </div>
                            </div>
                        </li>`;
                    });
                    $(""#tasksBody"").html(HTML);
                }
            });
        }
        loadData();
    </script>
    <script>
    const wrapper = document.querySelector("".wrapper"");
    const carousel = document.querySelector("".carousel"");
    firstCardWidth = carousel.querySelector("".card"").offsetWidth;
    const arrowBtns = document.querySelectorAll("".mov"");
    const carouselChildrens = [.");
                WriteLiteral(@"..carousel.children];

    let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;

    // Get the number of cards that can fit in the carousel at once
    let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);

    // Add event listeners for the arrow buttons to scroll the carousel left and right
    arrowBtns.forEach(btn => {
        btn.addEventListener(""click"", () => {
            carousel.scrollLeft += btn.id == ""leftBtn"" ? -firstCardWidth-50 : firstCardWidth;
        });
    });

");
                WriteLiteral("\r\n");
                WriteLiteral("    wrapper.addEventListener(\"mouseenter\", () => clearTimeout(timeoutId));\r\n    </script>\r\n    <!--Create-->\r\n    <script>\r\n        function getCreateModel() {\r\n            window.location = \'");
#nullable restore
#line 181 "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml"
                          Write(Url.Action("Create", "Task"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n        }\r\n        // onclick=\"sendModelAjax()\"\r\n    </script>\r\n    <!--Edit-->\r\n    <script>\r\n        function getEditModel(id) {\r\n            window.location = \'");
#nullable restore
#line 188 "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml"
                          Write(Url.Action("Edit", "Task"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/' + id;
        }
        // getEditModel(taskId) we call it in this way
    </script>
    <!--Remove -->
    <script>
        function removeCard(id) {
            var sweet_loader = `<div style=""display: block"">
                     <div class=""loader"">
                     </div>
                 </div>`;
            swal.fire({
                html: `${sweet_loader}<div style=""margin-top: 50px"" >Loading...</div>`,
                showConfirmButton: false,
            });
            $.ajax({
                url: '");
#nullable restore
#line 204 "C:\Users\ASUS\Desktop\Annotation\App\Views\Task\Index.cshtml"
                 Write(Url.Action("Delete","Task"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                type: 'POST',
                data: {""Id"": id},
                dataType: 'json',
                success: function (response) {
                    swal.close();
                    console.log('asmdsiwofnwinf');
                    Response(response);
                    loadData();
                }
            });
        }
    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DB.Models.Task> Html { get; private set; }
    }
}
#pragma warning restore 1591
