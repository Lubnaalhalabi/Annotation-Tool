@{
    ViewData["Title"] = "Report";
}

<link href="https://fonts.googleapis.com/css?family=Lato:400,700" rel="stylesheet">

@section CSS {
    <link rel="stylesheet" href="/css/report.css?v7" />
}

<div class="row">
    <div class="col-md-6" style="padding-right:0px">
        <div class="card" style="height: 335px; ">
            <div class="card-header p-2">
                <h5 style=" color: #4b4747; margin: auto; text-align: center; font-weight: 900;">Total: <span>@ViewBag.TaskAchievement%</span></h5>
            </div>
            <div class="card-body p-3">
                <canvas id="horizontalBarChartCanvas"></canvas>
            </div>
        </div>
    </div>

    <div class="col-md-6" style=" padding-left: 7px;">
        <div class="card" style="height: 335px; ">
            <div class="card-header p-2">
                <div class="card-header p-2">
                    <h5 style=" color: #4b4747; margin: auto; text-align: center; font-weight: 900;">Achievement</h5>
                </div>
            </div>
            <div class="card-body p-3">
                <div class="chart">
                    <canvas id="chart-line" class="chart-canvas" style="display: block; box-sizing: border-box; height: 281px; width: 563px; margin-top: -32px; "></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-2" style="margin-left: 2px; width: 110%;">

    <div class=" card col-lg-3 col-sm-3 col-md-3" style="height: 295px;">
        <div id="chartdiv" style="margin-left: -48px; height: 290%; width: 130%; ">
        </div>
        @if (ViewBag.Kappa >= 0 && ViewBag.Kappa < 21)
        {
            <h6 style="position:absolute; color: black;">Cohen's kappa: <strong>  None</strong></h6>
        }
        else if (ViewBag.Kappa >= 21 && ViewBag.Kappa < 40)
        {
            <h6 style="position:absolute; color: black;">Cohen's kappa: <strong>  Minimal</strong></h6>
        }
        else if (ViewBag.Kappa >= 40 && ViewBag.Kappa < 60)
        {
            <h6 style="position:absolute; color: black;">Cohen's kappa: <strong>  Weak</strong></h6>
        }
        else if (ViewBag.Kappa >= 60 && ViewBag.Kappa < 80)
        {
            <h6 style="position:absolute; color: black;">Cohen's kappa: <strong>  Moderate</strong></h6>
        }
        else if (ViewBag.Kappa >= 80 && ViewBag.Kappa < 91)
        {
            <h6 style="position:absolute; color: black;">Cohen's kappa: <strong>  Strong</strong></h6>
        }
        else
        {
            <h6 style="position:absolute; color: black;">Cohen's kappa: <strong>  Almost Perfect</strong></h6>
        }
        <div style=" width: 346px; margin-left: -20px;">
            <div class="charticon">
                <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center" style="background-image: linear-gradient(310deg, #ffe4c4 60%, bisque 100%) !important; color: #ffe4c4 ">
                    .
                </div>
                <p class="text-xs mt-1 mb-0 font-weight-bold" style="color:black">
                    None
                </p>
            </div>
            <div class="charticon">
                <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center" style="background-image: linear-gradient(310deg, #e27070 60%, bisque 100%) !important; color: #e27070 ">
                    .
                </div>
                <p class="text-xs mt-1 mb-0 font-weight-bold" style="color:black">
                    Minimal
                </p>
            </div>
            <div class="charticon">
                <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center" style="background-image: linear-gradient(310deg, #cf4545 60%, bisque 100%) !important; color: #cf4545 ">
                    .
                </div>
                <p class="text-xs mt-1 mb-0 font-weight-bold" style="color:black">
                    Weak
                </p>
            </div>
            <div class="charticon">
                <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center" style="background-image: linear-gradient(310deg, #b24444 60%, bisque 100%) !important; color: #b24444 ">
                    .
                </div>
                <p class="text-xs mt-1 mb-0 font-weight-bold" style="color:black">
                    Moderate
                </p>
            </div>
            <div class="charticon">
                <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center" style="background-image: linear-gradient(310deg, #851c1c 60%, bisque 100%) !important; color: #851c1c ">
                    .
                </div>
                <p class="text-xs mt-1 mb-0 font-weight-bold" style="color:black">
                    Strong
                </p>
            </div>
            <div class="charticon">
                <div class="icon icon-shape icon-xxs shadow border-radius-sm bg-gradient-danger text-center me-2 d-flex align-items-center justify-content-center" style="background-image: linear-gradient(310deg, #520f0f 60%, bisque 100%) !important; color: #520f0f ">
                    .
                </div>
                <p class="text-xs mt-1 mb-0 font-weight-bold" style="color:black">
                    Almost<br />Perfect
                </p>
            </div>
        </div>
    </div>
    <div class=" card col-lg-3 col-sm-3 col-md-3" style="height: 295px; margin-left: 7px; margin-right: -6px;">
        <div id="chartdiv1" style="margin-left: -48px; height: 290%; width: 130%; ">
        </div>
        <h6 style="position:absolute; color: black;">Inter agreement</h6>
        <div style=" width: 346px; margin-left: -20px;">

        </div>
    </div>


        <div class="col-lg-5 col-sm-5 col-md-5">
            <div class="card p-3" style="height: 295px;">
                <div class="border-radius-lg py-3 pe-1 mb-3" style=" background-image: linear-gradient(310deg, black -125%, #ded9d9 75%);">
                    <div class="chart">
                        <canvas id="chart-bars" class="chart-canvas" style="display: block; box-sizing: border-box; height: 197px; width: 541px;"></canvas>
                    </div>
                </div>
                <h5 class="ms-2 mb-0" style="color: #4b4747; text-align: center; font-weight: 900;">Record distribution</h5>
            </div>
        </div>

    </div>


@section Scripts{
    <script src="../assets/js/core/popper.min.js"></script>
    <script src="../assets/js/core/bootstrap.min.js"></script>
    <script src="../assets/js/plugins/perfect-scrollbar.min.js"></script>
    <script src="../assets/js/plugins/smooth-scrollbar.min.js"></script>
    <script src="../assets/js/plugins/chartjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/radar.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <!--Start Classes Chart-->
    <script>
        var resList = [];
        var NameList = [];
        var List = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ClassNameRate));
        List.forEach(function (item) {
            NameList.push(item.Class);
            resList.push(item.Rate);
        });

        var ctx = document.getElementById("chart-bars").getContext("2d");

        new Chart(ctx, {
            type: "bar",
            data: {
                labels: NameList,
                datasets: [{
                    label: "Percentage of classes selection",
                    tension: 0.4,
                    borderWidth: 0,
                    borderRadius: 4,
                    borderSkipped: false,
                    backgroundColor: "#6a1414fc",
                    data: resList,
                    maxBarThickness: 15
                },],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                scales: {
                    yAxes: [{
                        gridLines: {
                            display: true,
                            drawTicks: false,
                            tickMarkLength: 5,
                            drawBorder: false
                        },
                        ticks: {
                            padding: 5,
                            beginAtZero: true,
                            fontColor: '#555759',
                            fontFamily: 'Open Sans',
                            fontSize: 11,
                            min: 0,
                            max: 100,
                            callback: function (label, index, labels) {
                                return label;
                            }
                        },

                    }],
                    x: {
                        grid: {
                            drawBorder: false,
                            display: false,
                            drawOnChartArea: false,
                            drawTicks: false
                        },
                        ticks: {
                            display: false
                        },
                    },
                },
            },
        });
    </script>
    <!--Achievement-->
    <script>
        var ctx2 = document.getElementById("chart-line").getContext("2d");

        var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

        gradientStroke1.addColorStop(0, 'rgba(20,23,39,0)');

        var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

        gradientStroke2.addColorStop(0, 'rgba(20,23,39,0)');

        new Chart(ctx2, {
            type: "line",
            data: {
                labels:  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.date)),
                datasets: [{
                    label: "Opetimal",
                    tension: 0.4,
                    borderWidth: 0,
                    pointRadius: 0,
                    borderColor: "#525e3a",
                    borderWidth: 3,
                    backgroundColor: gradientStroke1,
                    fill: true,
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.y_axisOptimal)),
                    maxBarThickness: 8

                },
                {
                    label: "Actual",
                    tension: 0.4,
                    borderWidth: 0,
                    pointRadius: 0,
                    borderColor: "#520f0f",
                    borderWidth: 3,
                    backgroundColor: gradientStroke2,
                    fill: true,
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.y_axis)),
                    maxBarThickness: 8
                },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                scales: {
                    y: {
                        grid: {
                            drawBorder: false,
                            display: true,
                            drawOnChartArea: true,
                            drawTicks: false,
                            borderDash: [5, 5]
                        },
                        ticks: {
                            display: true,
                            padding: 10,
                            color: '#b2b9bf',
                            font: {
                                size: 11,
                                family: "Open Sans",
                                style: 'normal',
                                lineHeight: 2
                            },
                        }
                    },
                    x: {
                        grid: {
                            drawBorder: false,
                            display: false,
                            drawOnChartArea: false,
                            drawTicks: false,
                            borderDash: [5, 5]
                        },
                        ticks: {
                            display: true,
                            color: '#b2b9bf',
                            padding: 20,
                            font: {
                                size: 11,
                                family: "Open Sans",
                                style: 'normal',
                                lineHeight: 2
                            },
                        },
                        callback: function (value, index, values) {
                            // Format the date string for display
                            return new Date(value).toLocaleDateString();
                        }
                    },
                },
            },
        });
    </script>
    <!--Start Gauge Charts-->
    <script>
        am5.ready(function () {

            var root = am5.Root.new("chartdiv1");

            root.setThemes([
                am5themes_Animated.new(root)
            ]);

            var chart = root.container.children.push(
                am5radar.RadarChart.new(root, {
                    panX: false,
                    panY: false,
                    startAngle: 180,
                    endAngle: 360
                })
            );

            var axisRenderer = am5radar.AxisRendererCircular.new(root, {
                innerRadius: -10,
                strokeOpacity: 1,
                strokeWidth: 23,
                strokeGradient: am5.LinearGradient.new(root, {
                    rotation: 0,
                    stops: [
                        { color: am5.color(0xffe4c4) },
                        { color: am5.color(0xe27070) },
                        { color: am5.color(0xcf4545) },
                        { color: am5.color(0xb24444) },
                        { color: am5.color(0x851c1c) },
                        { color: am5.color(0x520f0f) }
                    ]
                })
            });

            var xAxis = chart.xAxes.push(
                am5xy.ValueAxis.new(root, {
                    maxDeviation: 0,
                    min: 0,
                    max: 100,
                    strictMinMax: true,
                    renderer: axisRenderer
                })
            );

            var axisDataItem = xAxis.makeDataItem({});
            axisDataItem.set("value", 0);

            var bullet = axisDataItem.set("bullet", am5xy.AxisBullet.new(root, {
                sprite: am5radar.ClockHand.new(root, {
                    radius: am5.percent(99)
                })
            }));

            xAxis.createAxisRange(axisDataItem);

            axisDataItem.get("grid").set("visible", false);

            setInterval(() => {
                axisDataItem.animate({
                    key: "value",
                    to: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.observedAgreement)),
                    duration: 800,
                    easing: am5.ease.out(am5.ease.cubic)
                });
            }, 2000);

            chart.appear(1000, 100);

        });
    </script>      
    <script>
        am5.ready(function () {

            var root = am5.Root.new("chartdiv");

            root.setThemes([
                am5themes_Animated.new(root)
            ]);

            var chart = root.container.children.push(
                am5radar.RadarChart.new(root, {
                    panX: false,
                    panY: false,
                    startAngle: 180,
                    endAngle: 360
                })
            );

            var axisRenderer = am5radar.AxisRendererCircular.new(root, {
                innerRadius: -10,
                strokeOpacity: 1,
                strokeWidth: 23,
                strokeGradient: am5.LinearGradient.new(root, {
                    rotation: 0,
                    stops: [
                        { color: am5.color(0xffe4c4) },
                        { color: am5.color(0xe27070) },
                        { color: am5.color(0xcf4545) },
                        { color: am5.color(0xb24444) },
                        { color: am5.color(0x851c1c) },
                        { color: am5.color(0x520f0f) }
                    ]
                })
            });


            var xAxis = chart.xAxes.push(
                am5xy.ValueAxis.new(root, {
                    maxDeviation: 0,
                    min: 0,
                    max: 100,
                    strictMinMax: true,
                    renderer: axisRenderer
                })
            );

            var axisDataItem = xAxis.makeDataItem({});
            axisDataItem.set("value", 0);

            var bullet = axisDataItem.set("bullet", am5xy.AxisBullet.new(root, {
                sprite: am5radar.ClockHand.new(root, {
                    radius: am5.percent(99)
                })
            }));

            xAxis.createAxisRange(axisDataItem);

            axisDataItem.get("grid").set("visible", false);

            setInterval(() => {
                axisDataItem.animate({
                    key: "value",
                    to: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Kappa)),
                    duration: 800,
                    easing: am5.ease.out(am5.ease.cubic)
                });
            }, 2000);

            chart.appear(1000, 100);

        });
    </script>
    <!--BarChart-->
    <script>
        var resList = [];
        var NameList = [];
        var List = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AnnotatorNameCompletionRate));
        List.forEach(function (item) {
            NameList.push(item.AnnotatorName);
            resList.push(item.CompletionRate);
        });

        Chart.defaults.global.defaultFontFamily = "Open Sans";
        var horizontalBarChartCanvas = document.getElementById('horizontalBarChartCanvas').getContext('2d');
        var horizontalBarChart = new Chart(horizontalBarChartCanvas, {
            type: 'horizontalBar',
            data: {
                labels: NameList,
                datasets: [{
                    data: resList,
                    backgroundColor: ["#6a1414fc", "#6a1414fc", "#6a1414fc", "#6a1414fc", "#6a1414fc", "#6a1414fc", "#6a1414fc"],
                }]
            },
            options: {
                tooltips: {
                    enabled: false
                },
                responsive: true,
                legend: {
                    display: false,
                    position: 'bottom',
                    fullWidth: true,
                    labels: {
                        boxWidth: 10,
                        padding: 50
                    }
                },
                scales: {
                    yAxes: [{
                        barPercentage: 0.75,
                        gridLines: {
                            display: true,
                            drawTicks: true,
                            drawOnChartArea: false
                        },
                        ticks: {
                            fontColor: '#555759',
                            fontFamily: 'Open Sans',
                            fontSize: 11
                        }
                    }],
                    xAxes: [{
                        gridLines: {
                            display: true,
                            drawTicks: false,
                            tickMarkLength: 5,
                            drawBorder: false
                        },
                        ticks: {
                            padding: 5,
                            beginAtZero: true,
                            fontColor: '#555759',
                            fontFamily: 'Open Sans',
                            fontSize: 11,
                            min: 0,
                            max: 100,
                            callback: function (label, index, labels) {
                                return label;
                            }
                        },

                    }]
                }
            }
        });
    </script>
}
